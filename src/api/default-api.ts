/* tslint:disable */
/* eslint-disable */
/**
 * Brand API
 * API for retrieving and searching brand data
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BrandNaicsGet200Response } from '../models';
// @ts-ignore
import type { BrandRetrieveGet200Response } from '../models';
// @ts-ignore
import type { BrandRetrieveGet401Response } from '../models';
// @ts-ignore
import type { BrandSearchGet200Response } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint to classify any brand into a 2022 NAICS code.
         * @summary Retrieve NAICS code for any brand
         * @param {string} input Brand domain or title to retrieve NAICS code for. If a valid domain is provided in &#x60;input&#x60;, it will be used for classification, otherwise, we will search for the brand using the provided title.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandNaicsGet: async (input: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'input' is not null or undefined
            assertParamExists('brandNaicsGet', 'input', input)
            const localVarPath = `/brand/naics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (input !== undefined) {
                localVarQueryParameter['input'] = input;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve brand data by domain
         * @param {string} domain Domain name to retrieve brand data for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandRetrieveGet: async (domain: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domain' is not null or undefined
            assertParamExists('brandRetrieveGet', 'domain', domain)
            const localVarPath = `/brand/retrieve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (domain !== undefined) {
                localVarQueryParameter['domain'] = domain;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search brands by query
         * @param {string} query Query string to search brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandSearchGet: async (query: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('brandSearchGet', 'query', query)
            const localVarPath = `/brand/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint specially designed for platforms that want to identify transaction data by the transaction title.
         * @summary Identify brand from transaction data
         * @param {string} transactionInfo Transaction information to identify the brand
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandTransactionIdentifierGet: async (transactionInfo: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionInfo' is not null or undefined
            assertParamExists('brandTransactionIdentifierGet', 'transactionInfo', transactionInfo)
            const localVarPath = `/brand/transaction_identifier`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (transactionInfo !== undefined) {
                localVarQueryParameter['transaction_info'] = transactionInfo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint to classify any brand into a 2022 NAICS code.
         * @summary Retrieve NAICS code for any brand
         * @param {string} input Brand domain or title to retrieve NAICS code for. If a valid domain is provided in &#x60;input&#x60;, it will be used for classification, otherwise, we will search for the brand using the provided title.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandNaicsGet(input: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandNaicsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandNaicsGet(input, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.brandNaicsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve brand data by domain
         * @param {string} domain Domain name to retrieve brand data for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandRetrieveGet(domain: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandRetrieveGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandRetrieveGet(domain, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.brandRetrieveGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search brands by query
         * @param {string} query Query string to search brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandSearchGet(query: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandSearchGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandSearchGet(query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.brandSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Endpoint specially designed for platforms that want to identify transaction data by the transaction title.
         * @summary Identify brand from transaction data
         * @param {string} transactionInfo Transaction information to identify the brand
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandTransactionIdentifierGet(transactionInfo: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandRetrieveGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandTransactionIdentifierGet(transactionInfo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.brandTransactionIdentifierGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Endpoint to classify any brand into a 2022 NAICS code.
         * @summary Retrieve NAICS code for any brand
         * @param {DefaultApiBrandNaicsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandNaicsGet(requestParameters: DefaultApiBrandNaicsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BrandNaicsGet200Response> {
            return localVarFp.brandNaicsGet(requestParameters.input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve brand data by domain
         * @param {DefaultApiBrandRetrieveGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandRetrieveGet(requestParameters: DefaultApiBrandRetrieveGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BrandRetrieveGet200Response> {
            return localVarFp.brandRetrieveGet(requestParameters.domain, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search brands by query
         * @param {DefaultApiBrandSearchGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandSearchGet(requestParameters: DefaultApiBrandSearchGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BrandSearchGet200Response> {
            return localVarFp.brandSearchGet(requestParameters.query, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint specially designed for platforms that want to identify transaction data by the transaction title.
         * @summary Identify brand from transaction data
         * @param {DefaultApiBrandTransactionIdentifierGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandTransactionIdentifierGet(requestParameters: DefaultApiBrandTransactionIdentifierGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BrandRetrieveGet200Response> {
            return localVarFp.brandTransactionIdentifierGet(requestParameters.transactionInfo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for brandNaicsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiBrandNaicsGetRequest
 */
export interface DefaultApiBrandNaicsGetRequest {
    /**
     * Brand domain or title to retrieve NAICS code for. If a valid domain is provided in &#x60;input&#x60;, it will be used for classification, otherwise, we will search for the brand using the provided title.
     * @type {string}
     * @memberof DefaultApiBrandNaicsGet
     */
    readonly input: string
}

/**
 * Request parameters for brandRetrieveGet operation in DefaultApi.
 * @export
 * @interface DefaultApiBrandRetrieveGetRequest
 */
export interface DefaultApiBrandRetrieveGetRequest {
    /**
     * Domain name to retrieve brand data for
     * @type {string}
     * @memberof DefaultApiBrandRetrieveGet
     */
    readonly domain: string
}

/**
 * Request parameters for brandSearchGet operation in DefaultApi.
 * @export
 * @interface DefaultApiBrandSearchGetRequest
 */
export interface DefaultApiBrandSearchGetRequest {
    /**
     * Query string to search brands
     * @type {string}
     * @memberof DefaultApiBrandSearchGet
     */
    readonly query: string
}

/**
 * Request parameters for brandTransactionIdentifierGet operation in DefaultApi.
 * @export
 * @interface DefaultApiBrandTransactionIdentifierGetRequest
 */
export interface DefaultApiBrandTransactionIdentifierGetRequest {
    /**
     * Transaction information to identify the brand
     * @type {string}
     * @memberof DefaultApiBrandTransactionIdentifierGet
     */
    readonly transactionInfo: string
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Endpoint to classify any brand into a 2022 NAICS code.
     * @summary Retrieve NAICS code for any brand
     * @param {DefaultApiBrandNaicsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public brandNaicsGet(requestParameters: DefaultApiBrandNaicsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).brandNaicsGet(requestParameters.input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve brand data by domain
     * @param {DefaultApiBrandRetrieveGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public brandRetrieveGet(requestParameters: DefaultApiBrandRetrieveGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).brandRetrieveGet(requestParameters.domain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search brands by query
     * @param {DefaultApiBrandSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public brandSearchGet(requestParameters: DefaultApiBrandSearchGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).brandSearchGet(requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint specially designed for platforms that want to identify transaction data by the transaction title.
     * @summary Identify brand from transaction data
     * @param {DefaultApiBrandTransactionIdentifierGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public brandTransactionIdentifierGet(requestParameters: DefaultApiBrandTransactionIdentifierGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).brandTransactionIdentifierGet(requestParameters.transactionInfo, options).then((request) => request(this.axios, this.basePath));
    }
}

